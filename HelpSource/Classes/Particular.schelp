TITLE:: Particular
summary:: Particle synth defs
categories:: Granular synthesis
related:: SynthDef

DESCRIPTION::
Easily accessable particle synth defs, including Ctk-synthdefs

INSTANCEMETHODS::

METHOD:: def
This is the main method of this class. Use it to get a particular SynthDef name

ARGUMENT:: envelopetype
Symbol, you can choose either of the following:
'sine'
'click'
'perc'
'revperc'
'quasi'
'three'
'welch'
'expodec'
'rexpodec'
'm'

You can see what these look like by executing the following code:
code:: 
p = Particular.new;
p.plotEnvs;
::

ARGUMENT:: instrument
Symbol, you can choose either of the following:
'sin'
'fm'
'buf1'
'buf2'
'in'

ARGUMENT:: root
Symbol (the prefix of the synths, by default it's 'particular')

returns:: SynthDef name as symbol

METHOD:: defs
Identity dictionary containing all synth def names

returns:: IdentityDictionary

METHOD:: postSynths
Post all available synths

METHOD:: plotEnvs 
Plot all envelopes available

returns:: nil

EXAMPLES::

code::
p = Particular.new;
Pdef(\g1).play;

// Random sine grains
Pdef(\g1,
    Pbind(\instrument, p.def("expodec", "sin"), \dur, Pwhite(0.01, 0.25), \freq, Pkey(\dur).reciprocal * 10000)
);

// Random fm grains with random envelopes
Pdef(\g1,
    Pbind(\instrument, Pxrand(p.defs['fm'], inf), \dur, Pwhite(0.01, 0.25), \freq, Pkey(\dur).reciprocal * 10000)
);
::
