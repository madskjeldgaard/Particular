TITLE:: Particular
summary:: Particle synthesis library
categories:: Granular synthesis
related:: SynthDef

DESCRIPTION::
This is a particle synthesis library formalizing a common way of working with particle synthesis in SuperCollider which involves working on a per-particle basis, often using patterns, as is seen in the (MIT) SuperCollider Book's chapter on granular synthesis for example. 

Particular contains a library of common envelope shapes for granular synthesis and common source sounds for the grains and combines those two automatically in all possible combinations in easily accessible synths. 

Note: All parameters in these synths are normalized to 0.0-1.0

INSTANCEMETHODS::

METHOD:: def
This is the main method of this class. Use it to get a particular SynthDef name

ARGUMENT:: envelopetype

For example "expodec"

code::
// See all envs
p.postEnvs
::

You can see what these look like by executing the following code:
code:: 
p = Particular.new;
p.plotEnvs;
::

ARGUMENT:: source
Symbol, you can choose either of the following:
'sin'
'fm'
'buf1'
'buf2'
'chirp'
'chirpp'

METHOD:: defs
Identity dictionary containing all synth def names

returns:: IdentityDictionary

METHOD:: postSynths
Post all available synths

METHOD:: plotEnvs 
Plot all envelopes available

returns:: nil

EXAMPLES::

code::
p = Particular.new(numChannels: 2);
b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

// Random sine grains
Pdef(\g1,
    Pbind(
		\instrument, p.def("expodec", "sin"), 
		\dur, Pwhite(0.01, 0.25), 
		\freq, Pwhite(0.0,1.0)
	)
).play;

// Simple time stretch
Pdef(\timeStretch, 
	Pbind(
		\instrument, p.def("hann", "buf1"),
		\buffer, b,
		\timestretch, 8,
		\overlaps, 4, // Overlap between grains
		\bufdur, Pkey(\timestretch) * Pfunc({|ev| ev[\buffer].duration}),
		\start, Pseg([0, 1], Pkey(\bufdur), \lin, inf), // Buffer pointer
		\freq, 0.1, // Playback rate
		\dur, 0.1, // Duration of each sound event
		\sustain, Pkey(\overlaps) * Pkey(\dur),
		\pan, Pkey(\start) // Pan follows buffer pointer
	)
).play;
::
